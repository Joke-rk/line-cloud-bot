// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ library ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const express = require("express");       // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Web Server
const bodyParser = require("body-parser"); // ‡πÉ‡∏ä‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
const axios = require("axios");            // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (HTTP Request)
const line = require("@line/bot-sdk");     // LINE Messaging API SDK

const app = express();     
app.use(bodyParser.json()); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ server ‡∏≠‡πà‡∏≤‡∏ô JSON ‡πÑ‡∏î‡πâ

// ---- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Messaging API ----
const config = {
  channelAccessToken: "8Ji7VFCdF/g5/bujK+g02zPKvBQW9C7WhMpzaSbPIV+x97Ecf7ik1fT0G3j6ynUkYXRhhe5MXQpDIKYGgQ5Z17kceLo3lAKOMUDsYlKo4BgMpNbjRYLSR59Z1mBtFo8Lflw3cwlK9crqOlGBxuCfTwdB04t89/1O/w1cDnyilFU=", // <<< Access Token ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì copy ‡∏°‡∏≤
  channelSecret: "fba78e207ea5dd97bdcf3030a840a52f" // <<< Channel Secret
};
const client = new line.Client(config); // ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö LINE API

// ---- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Webhook Endpoint ----
app.post("/webhook", (req, res) => {
  // ‡∏î‡∏±‡∏Å‡∏ó‡∏∏‡∏Å event ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà handleEvent()
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error(err);
      res.status(500).end();
    });
});

// ---- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ----
async function handleEvent(event) {
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠ "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (event.type === "message" && event.message.type === "image") {
    
    // 1) ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE API
    const url = `https://api-data.line.me/v2/bot/message/${event.message.id}/content`;
    const response = await axios.get(url, {
      responseType: "arraybuffer", // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Binary
      headers: { Authorization: `Bearer ${config.channelAccessToken}` } // ‡πÉ‡∏™‡πà token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    });

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô base64 (‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Teachable Machine)
    const imageBase64 = Buffer.from(response.data, "binary").toString("base64");

    // 2) URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Teachable Machine
    const tmUrl = "https://teachablemachine.withgoogle.com/models/wiosdb8Tx/";
    const predictUrl = `${tmUrl}image`; // endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (form-data) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Teachable Machine
    const FormData = require("form-data");
    const formData = new FormData();
    formData.append("file", Buffer.from(imageBase64, "base64"), "upload.jpg");

    // 3) ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡πÉ‡∏´‡πâ Teachable Machine ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    const predictRes = await axios.post(predictUrl, formData, {
      headers: formData.getHeaders()
    });

    // ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (list ‡∏Ç‡∏≠‡∏á label + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô)
    const predictions = predictRes.data;

    // ‡∏´‡∏≤ label ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (probability) ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const best = predictions.reduce((a, b) =>
      a.probability > b.probability ? a : b
    );

    // 4) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô LINE
    return client.replyMessage(event.replyToken, {
      type: "text",
      text: `‡πÄ‡∏°‡∏Ü‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ${best.className} (${(best.probability * 100).toFixed(2)}%)`
    });
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: "‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏î‡∏π üå§Ô∏è"
  });
}

// ---- Start Server ----
const PORT = process.env.PORT || 3000; // ‡πÉ‡∏ä‡πâ port 3000 ‡∏´‡∏£‡∏∑‡∏≠ port ‡∏à‡∏≤‡∏Å environment (‡∏Å‡∏£‡∏ì‡∏µ deploy)
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});
